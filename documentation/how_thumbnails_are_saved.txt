How Preview Images Are Saved in Hey Hannah App
==============================================

Image Saving Process Overview

1. Capture Setup - Always-Available Hidden Container
---------------------------------------------------
The app maintains a hidden capture container that's always rendered but invisible (lines 1463-1517 in App.js):

```javascript
{/* Always-available hidden capture container for saving */}
<View style={[styles.captureContainer, {
  position: "absolute",
  opacity: 0,           // Always invisible
  pointerEvents: "none", // Can't be interacted with
  zIndex: -1000,        // Behind everything
  backgroundColor: currentBackgroundColor,
}]}>
  <View ref={captureTextRef}>  {/* This is what gets captured */}
    <Text style={[/* styled with current colors, fonts, etc */]}>
      {text}
    </Text>
    <Text style={styles.watermark}>
      made with Hey Hannah
    </Text>
  </View>
</View>
```

2. Capture Trigger
------------------
When the user wants to save an image, the app calls saveToGallery() which:

1. Captures the hidden container using captureRef(captureTextRef.current):
```javascript
const uri = await captureRef(captureTextRef.current, {
  format: "jpg",
  quality: 1.0,
  result: "tmpfile",
});
```

2. Creates the image file as a JPG with high quality to a temporary location

3. File Storage
---------------
The captured image is then saved permanently:

1. Generate meaningful filename using generateFilename() utility:
   - Based on text content (first 40 characters, cleaned)
   - Includes date in DD-MM-YYYY format
   - Example: hello-world-25-09-2025.jpg
   - Handles duplicates by adding incrementing numbers

2. Copy to permanent location:
```javascript
const permanentPath = galleryDir + filename;
await FileSystem.copyAsync({
  from: uri,          // temporary capture
  to: permanentPath,  // permanent gallery location
});
```

3. Create metadata object with all the styling information:
```javascript
const versionInfo = getVersionInfo();

// Get the complete palettes that were used for this image
const backgroundPalette = getPalette(bgColorModeSelection);
const textPalette = getPalette(textColorModeSelection);

const metadata = {
  id: timestamp,
  filename,
  path: permanentPath,
  text: text,                    // Full text content
  backgroundColor: currentBackgroundColor,  // Actual hex color (e.g., "#FF3333")
  backgroundPalette: backgroundPalette, // Complete palette array used for background
  textColor: currentTextColor,   // Actual hex color
  textPalette: textPalette,     // Complete palette array used for text
  alignment,                    // 0=left, 1=center, 2=right
  fontFamily: FONT_FAMILIES[fontFamily], // Font family name (e.g., "System", "Courgette_400Regular")
  fontSize,                     // Calculated font size
  previewHeight,               // Calculated height for this image
  isFavorited: false,
  createdAt: new Date().toISOString(),
  appVersion: versionInfo.appVersion,  // App version that created this image
  buildNumber: versionInfo.buildNumber, // Build number that created this image
  os: "ios",                    // Operating system platform
};
```

4. Gallery Database Update
--------------------------
The metadata is stored in a JSON file:
- Location: FileSystem.documentDirectory + "gallery/metadata.json"
- Structure: Array of image metadata objects
- Sorting: New images added at beginning (newest first)

5. Key Features
---------------

Automatic Saving: 
- Images are auto-saved when switching between gallery/editor
- Images are auto-saved before creating new images
- No manual save button needed

Smart Filenames:
- Based on actual text content
- Include dates for organization
- Handle duplicates intelligently

Complete Style Preservation:
- Actual colors (hex values) and complete palettes are saved
- Color indices are calculated from palettes when needed (no redundant storage)
- Font family names stored as strings (future-proof against font array changes)
- Font settings, alignment, text size all preserved
- Preview height calculated and saved for consistent reproduction
- Complete palette context preserved for perfect color cycling restoration

Version Tracking:
- App version and build number recorded for each image creation and edit
- Enables debugging and compatibility tracking across app updates
- Helps identify which version of the app created or last modified each image

Two Storage Systems:
- Image files: Actual JPG files stored in gallery directory
- Metadata: JSON file with all the styling and content information

6. Rendering Logic
------------------
When displaying gallery thumbnails, the system:
- Uses the saved backgroundColor and textColor hex values directly
- Falls back to COLOR_VALUES lookup for legacy images
- Scales font size down by 0.21x for thumbnail display
- Uses all saved styling properties to ensure accurate previews

This architecture ensures that every saved image is a perfect snapshot of how the text appeared when saved, with all styling preserved both in the visual file and the metadata for reconstruction.

7. Complete Metadata Example
----------------------------
Here's what a typical saved image metadata object looks like:

```json
{
  "id": 1695648151234,
  "filename": "hello-world-25-09-2025.jpg",
  "path": "/path/to/gallery/hello-world-25-09-2025.jpg",
  "text": "Hello World!",
  "backgroundColor": "#FFDD00",
  "backgroundPalette": ["#FF3333", "#FF7700", "#FFDD00", "#33DD33", "#3377FF", "#AA33FF", "#FFFFFF", "#222222"],
  "textColor": "#3377FF",
  "textPalette": ["#FF3333", "#FF7700", "#FFDD00", "#33DD33", "#3377FF", "#AA33FF", "#FFFFFF", "#222222"],
  "alignment": 1,
  "fontFamily": "Courgette_400Regular",
  "fontSize": 28,
  "previewHeight": 450,
  "isFavorited": false,
  "createdAt": "2025-09-25T12:34:56.789Z",
  "appVersion": "1.2.0",
  "buildNumber": "11",
  "os": "ios"
}
```

Palette Information Fields:
- backgroundPalette: Complete 8-color palette array used for background color
- textPalette: Complete 8-color palette array used for text color  
- Preserves exact color relationships and cycling context
- Enables perfect restoration of custom shade palettes
- Future-proofs against palette system changes

Font Family Information:
- fontFamily: Font family name stored as string (e.g., "System", "Courgette_400Regular")
- Future-proof against font array reordering or additions
- Calculated font index when needed by searching FONT_FAMILIES array
- Maintains backward compatibility with older index-based format

Platform and Version Information Fields:
- os: Operating system platform ("ios" for iPhone/iPad)
- appVersion: Semantic version of the app (matches app.json version)
- buildNumber: iOS build number (matches app.json ios.buildNumber)
- Updated on both image creation and editing for full audit trail

Optimized Storage Strategy:
The app uses intelligent storage approaches for maximum reliability:

Color Storage:
1. Hex colors (backgroundColor, textColor): Exact visual preservation
2. Complete palettes (backgroundPalette, textPalette): Full color context
3. Color indices calculated dynamically from hex color position in palette

Font Storage:
1. Font family names (fontFamily): Future-proof string storage
2. Font indices calculated dynamically from FONT_FAMILIES array lookup

This ensures that images can be:
- Displayed perfectly using hex colors
- Edited naturally with calculated indices and saved palettes
- Restored with complete color cycling functionality
- Preserved against future app changes
